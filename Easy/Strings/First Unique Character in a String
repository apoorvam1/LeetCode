# Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

# Examples:

# s = "leetcode"
# return 0.

# s = "loveleetcode",
# return 2.

#Solution 1: With If check
class Solution {
    public int firstUniqChar(String s) {
        if(s == null) return -1;
        
        int charCount[] = new int[127];
        
        char[] charr = s.toCharArray();
        for(int i = 0; i < s.length(); i++) {
            charCount[charr[i]]++;
        }
        
        for(int i = 0; i < s.length(); i++) {
            if(charCount[charr[i]] == 1)
               return i; 
        }
        return -1;        
    }
}


# Solution 2: With While loop
class Solution {
    public String reverseVowels(String s) {
        if (Objects.isNull(s)) return s;
        if (s.length() == 1) return s;

        int i = 0, j = s.length()-1;

        String vowels = "AEIOUaeiou";
        char[] chars = s.toCharArray();

        while (i < j) {
            while (i < j && vowels.indexOf(chars[i]) == -1) i++;
            while (i < j && vowels.indexOf(chars[j]) == -1) j--;

            char l = chars[i];
            char r = chars[j];

            chars[i] = r;
            chars[j] = l;
            
            j--;
            i++;
        }

        return new String(chars);
    }
}
