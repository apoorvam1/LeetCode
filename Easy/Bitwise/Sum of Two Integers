# Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.

# Example 1:

# Input: a = 1, b = 2
# Output: 3

# Example 2:  
# Input: a = -2, b = 3
# Output: 1

# My Note: 
# Consider binary form of the numbers
# '&' of the numbers signify where the carry is. Ex: 0011(decimal 3) & 0110(decimal 6) = 0010 2nd bit position is '1' and 
# it results in carry at the 3rd position
# hence << the result to get the position of the carry.
# '^' will result in sum of numbers without carry. Ex: 0011 ^ 0110 = 0111
# repeat the process until carry is 0


class Solution {
    public int getSum(int a, int b) {
        
        while(b != 0) {
            int c = a & b; // precalculation for carry
            a = a ^ b;      // xor to get sum without worrying about carry
            b = c << 1; // left shift c to get actual carry. If there is a non-zero carry it must be ^ with a else return a
        }
        return a;
    }
}
