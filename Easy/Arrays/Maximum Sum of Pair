# Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), ...,   
# (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.

# Example 1:
# Input: [1,4,3,2]

# Output: 4
# Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).
# Note:
# n is a positive integer, which is in the range of [1, 10000].
# All the integers in the array will be in the range of [-10000, 10000].


# My Notes
# Since the largest number cannot be added to the sum always make sure at least the second largest number is considered
# so if sorted, second largest number would be in the sum. And in the remaining element again the second largest number would # be in the sum.
# Hence sort and add every alternate element

class Solution {
    public int arrayPairSum(int[] nums) {
        if(nums.length % 2 != 0) return 0;
        Arrays.sort(nums);
        int sum = 0;
        for(int i = 0; i < nums.length; i+=2) {
            sum = sum + nums[i];
        }
        return sum;
    }
}
