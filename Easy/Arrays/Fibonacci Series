# The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

# F(0) = 0,   F(1) = 1
# F(N) = F(N - 1) + F(N - 2), for N > 1.
# Given N, calculate F(N)

#Iterative Solution
class Solution {
    public int fib(int N) {
        if(N == 0) return 0;
        if(N == 1) return 1;
        int fib1 = 0;
        int fib2 = 1;
        int fib = 1;
        for(int i = 2; i < N; i++) {
            fib1 = fib2;
            fib2 = fib;
            fib = fib1 + fib2;
        }
        return fib;
    }
}


# Recursive solution O(2^n)

class Solution {
    public int fib(int N) {
        if(N == 0) return 0;
        if(N == 1) return 1;
        return fib(N - 1) + fib(N - 2);
    }
}

# Memoized recursive solution O(n)
public int fib(int n) {
    int[] Fibo=new int[n+1];
    for(int i=2;i<n+1;i++)
        Fibo[i]=-1;
    return fib_helper(Fibo,n);
}

int fib_helper(int[] fib,int n)
{
    if(n<=1)
        return n;
    if(fib[n]!=-1)
        return fib[n];
    int ans=fib_helper(fib,n-1) + fib_helper(fib,n-2);
    fib[n]=ans;
    return ans;
}


