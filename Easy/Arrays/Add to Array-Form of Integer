For a non-negative integer X, the array-form of X is an array of its digits in left to right order. 
For example, if X = 1231, then the array form is [1,2,3,1].

Given the array-form A of a non-negative integer X, return the array-form of the integer X+K.

 

Example 1:

Input: A = [1,2,0,0], K = 34
Output: [1,2,3,4]
Explanation: 1200 + 34 = 1234
Example 2:

Input: A = [2,7,4], K = 181
Output: [4,5,5]
Explanation: 274 + 181 = 455
Example 3:

Input: A = [2,1,5], K = 806
Output: [1,0,2,1]
Explanation: 215 + 806 = 1021
Example 4:

Input: A = [9,9,9,9,9,9,9,9,9,9], K = 1
Output: [1,0,0,0,0,0,0,0,0,0,0]
Explanation: 9999999999 + 1 = 10000000000
 

Noteï¼š

1 <= A.length <= 10000
0 <= A[i] <= 9
0 <= K <= 10000
If A.length > 1, then A[0] != 0


Solution 1:
class Solution {
    public List<Integer> addToArrayForm(int[] A, int k) {
        Stack<Integer> stk1 = new Stack<>();
        Stack<Integer> stk2 = new Stack<>();
        LinkedList<Integer> res = new LinkedList<>();
        for(int i = 0; i < A.length; i++) {
            stk1.add(A[i]);
        }
        
        while(k > 0) {
            int last  = k % 10;
            k = k / 10;
            stk2.add(last);
        }
        Collections.reverse(stk2);
        
        int c = 0;
        while(!stk1.isEmpty()  || !stk2.isEmpty()) {
            int sum = 0;
            if(!stk1.isEmpty()) 
                sum = sum + stk1.pop();
            if(!stk2.isEmpty())
                sum += stk2.pop();
            sum +=  c;
            if (sum >= 10) {
                c = 1;
                sum = sum % 10;
            } else {
                c = 0;
            }
            res.offerFirst(sum);
        }
        
        if(c > 0) res.offerFirst(c);
        //Collections.reverse(res);
        return res;
    }
}


Solution 2:
Take K as a carry.
Add it to the lowest digit,
Update carry K,
and Keep going to higher digit.

Time Complexity

Insert will take O(1) time or O(N) time on shifting, depending on the data stucture.
But in this problem K is at most 5 digit so this is restricted.
So this part doesn't matter.

The overall time complexity is O(N).

class Solution {
    public List<Integer> addToArrayForm(int[] A, int K) {
        LinkedList<Integer> res = new LinkedList<>();
        
        for(int i = A.length - 1; i >=0; i--) {
            res.add(0, (A[i] + K) % 10);
            K = (A[i] + K) / 10;
        }
        
        while( K > 0) {
            res.add(0, K % 10);
            K = K / 10;
        }
        
        return res;
    }
}
