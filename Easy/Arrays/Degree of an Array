# Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any  # one of its elements.

# Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

# Example 1:
# Input: [1, 2, 2, 3, 1]
# Output: 2
# Explanation: 
# The input array has a degree of 2 because both elements 1 and 2 appear twice.
# Of the subarrays that have the same degree:
# [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
# The shortest length is 2. So return 2.
# Example 2:
# Input: [1,2,2,3,1,4,2]
# Output: 6

#My Note: Start and end pointer solution

class Solution {
    public int findShortestSubArray(int[] nums) {
        HashMap<Integer, Integer> hm  = new HashMap<>();
        int maxFreq = -1;
        for(int n : nums) {
            hm.put(n, hm.getOrDefault(n, 0) + 1);
            maxFreq = Math.max(maxFreq, hm.get(n));
        }
        
        Set<Integer> numsWithMaxFreq = new HashSet<>();
        for(int n : nums) {
            if(hm.get(n) == maxFreq) {
                numsWithMaxFreq.add(n);
            }
        }

        int len = Integer.MAX_VALUE;
        for(int maxFreqNum : numsWithMaxFreq) {
            int l = 0;
            int h = nums.length-1;
            while(nums[l]!=maxFreqNum) l++;
            while(nums[h]!=maxFreqNum) h--; 
            len = Math.min(len, h-l + 1);
        }
        
        return len;
        
    }
}
