# In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.
# Two nodes of a binary tree are cousins if they have the same depth, but have different parents.
# We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.
# Return true if and only if the nodes corresponding to the values x and y are cousins. 

# Example 1:
# Input: root = [1,2,3,4], x = 4, y = 3
# Output: false

# Example 2:
# Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
# Output: true

# Example 3:
# Input: root = [1,2,3,null,4], x = 2, y = 3
# Output: false
 
# Note:
# The number of nodes in the tree will be between 2 and 100.
# Each node has a unique integer value from 1 to 100.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    class Value {
        int p;
        int d;
        
        public Value(int p, int d) {
            this.p = p;
            this.d = d;
        }
    }
    
    public boolean isCousins(TreeNode root, int x, int y) {
        if(root == null|| x == root.val || y == root.val) return false;
        
        // Map to keep track of node-val to parent-node-val, node-depth
        Map<Integer, Value> map = new HashMap<>();
        
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        int depth = 1;
        
        while(!q.isEmpty()) {
            int size = q.size();
            
            for(int i = 0; i < size; i++) {
                TreeNode cur = q.poll();
                
                if(cur.left != null) {
                    q.offer(cur.left);
                    map.put(cur.left.val, new Value(cur.val, depth));
                }
                
                if(cur.right != null) {
                    q.offer(cur.right);
                    map.put(cur.right.val, new Value(cur.val, depth));
                }
                
                // if both x and y have been discovered break the loop
                if(map.containsKey(x) && map.containsKey(y)) break;
            }
            depth++;
        }
        
        Value xVal, yVal;
        
        if(!map.containsKey(x) || !map.containsKey(y)) {
            return false;
        } 
        
        xVal = map.get(x);
        yVal = map.get(y);
        
        return xVal.p != yVal.p && xVal.d == yVal.d;
      
    }
}
