# In a Binary Tree each node has at most 2 children and a value of it's own. 
# Each tree has a root node


Class Binarytree {
  static Class Node {
    int key;
    Node left;
    Node right;

    public Node(int key) {
      this.key = key;
      left = right = null;
    }
  }
  
  static Node root;
  // A temp variable to be used in manipulating tree as the reference to root should not be changed
  static Node temp = root;

  public Binarytree(int key) {
    this.root = new Node(key);
  }
  
  public BinaryTree() {
    this.root = null;
  }
  
  /****
  * Insert into the tree *
  ****/
  public void insert(Node temp, int key) {
    Queue<Node> queue = new Queue<>();
    queue.add(temp);
    
    while(!queue.isEmpty()) {
      temp = queue.peek();
      queue.remove();
      
      if(temp.left != null) {
         temp.left = new Node(key);
         return;
      } else {
        queue.add(temp.left);
      }
      
      if(temp.right != null) {
        temp.right = new Node(key);
        return;
      } else {
        queue.add(temp.right);
      }
    }
  }
  
  /****
  * Delete Node from tree 
  * Find the node to be deleted, Find the last node of the tree
  * Keep the data of the last node and make that last node null
  * Put the saved data into the node to be deleted
  ****/
  
  public void delete(Node root, int key) {
      Queue<Node> queue = new Queue<>();
      queue.add(root); 
      Node toBeDeleted;
      
      while(!queue.isEmpty()) {
          temp = queue.peek();
          queue.remove();
          
          if(temp.key == key) {
              toBeDeleted = temp;
          }
                    
          if(temp.left != null) {
             queue.add(temp.left);
          }
          
          // rightmost node should the last one to be popped out
          if(temp.right != null) {
              queue.add(temp.right);
          }
      }
      
      // temp holds the last node
      int lastNodeVal = temp.val;
      deleteLastNode(root, lastNodeVal);
      toBeDeleted.key = lastNodeVal;
  }
  
  public void deleteLastNode(Node root, int lastNodeVal) {
      Queue<Node> queue = new Queue<>();
      queue.add(root);
      
      while(!queue.isEmpty()) {
          temp = queue.peek();
          queue.remove();
          
          if(temp.left != null) {
            if(temp.right.key == lastNodeVal) {
                  temp.left = null;
                  return;
            } else {
                queue.add(temp.left);
            }
          }
          
          if(temp.right != null) {
              if(temp.right.key == lastNodeVal) {
                  temp.right = null;
                  return;
              } else {
                  queue.add(temp.right);
              }
          } 
      }
  }
  
  public static void main(String[] args) {
    BinaryTree tree = new BinaryTree(5);
    tree.left = new Node(11); 
    tree.left.left = new Node(7); 
    tree.right = new Node(9); 
    tree.right.left = new Node(15); 
    tree.right.right = new Node(8)

    tree.insert(12);
    
  }
}
