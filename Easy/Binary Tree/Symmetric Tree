# Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

# For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

#    1
#   / \
#  2   2
# / \ / \
#3  4 4  3

# But the following [1,2,2,null,3,null,3] is not:
#    1
#   / \
#  2   2
#   \   \
#   3    3


# Recursive Solution
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null)
            return true;
        return isSymmetricRecursive(root.left, root.right);
    }

    private boolean isSymmetricRecursive(TreeNode leftNode, TreeNode rightNode) {
        if(leftNode==null || rightNode==null)
            return leftNode==rightNode;
        if(leftNode.val!=rightNode.val)
            return false;
        return isSymmetricRecursive(leftNode.left, rightNode.right) && isSymmetricRecursive(leftNode.right, rightNode.left);
    }
}

Time: O(N) because we traverse the entire input tree once
Space: O(h)

# BFS Solution
    public boolean isSymmetric(TreeNode root) {
        if(root == null) return true;
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root.left);
        queue.offer(root.right);
        
        while(!queue.isEmpty()) {
            TreeNode left = queue.poll();
            TreeNode right = queue.poll();
        
            if(left == null && right == null) continue;
            if(left == null || right == null) return false;
            if(left.val != right.val) return false;
            
            queue.offer(left.left);
            queue.offer(right.right);
            
            queue.offer(left.right);
            queue.offer(right.left);
            
        }
        return true;
    }
    
    
Time: O(N)
Space: O(w) where w is the maximum number nodes in a level of the tree.
