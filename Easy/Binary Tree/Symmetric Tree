# Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

# For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

#    1
#   / \
#  2   2
# / \ / \
#3  4 4  3

# But the following [1,2,2,null,3,null,3] is not:
#    1
#   / \
#  2   2
#   \   \
#   3    3


class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null)
            return true;
        return isSymmetricRecursive(root.left, root.right);
    }

    private boolean isSymmetricRecursive(TreeNode leftNode, TreeNode rightNode) {
        if(leftNode==null || rightNode==null)
            return leftNode==rightNode;
        if(leftNode.val!=rightNode.val)
            return false;
        return isSymmetricRecursive(leftNode.left, rightNode.right) && isSymmetricRecursive(leftNode.right, rightNode.left);
    }
}
