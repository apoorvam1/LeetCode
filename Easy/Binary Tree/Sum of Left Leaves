# Find the sum of all left leaves in a given binary tree.

# Example:

#     3
#    / \
#   9  20
#     /  \
#    15   7

# There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.


# My Notes: Define what is left node. Use it as a boolean argument and solve
# Base case should check if is a leaf and left node

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        return helper(root, false);
    }
    
    private int helper(TreeNode root, boolean isLeft) {
        if(root == null) return 0;
        
        if(root.left == null && root.right == null && isLeft) {
            return root.val;
        }
        
        int leftSum = helper(root.left, true);
        int rightSum = helper(root.right, false);
        return leftSum + rightSum;
    }
}
