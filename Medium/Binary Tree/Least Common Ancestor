Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]

Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
Example 2:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
 

Note:

All of the nodes' values will be unique.
p and q are different and both values will exist in the binary tree.





class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null) 
            return root;
        
        // Maintain a map of child and it's parent
        HashMap<TreeNode, TreeNode> childParentMap = new HashMap<>();
        childParentMap.put(root, null);
        Stack<TreeNode> stk = new Stack<>();
        stk.push(root);
        
        // perform bfs and populate childParentMap until both the nodes are found
        while(!childParentMap.containsKey(p) || !childParentMap.containsKey(q)) {
            TreeNode curParent = stk.pop();
            
            if(curParent.left != null) {
                stk.push(curParent.left);
                childParentMap.put(curParent.left, curParent);
            }
            if(curParent.right != null) {
                stk.push(curParent.right);
                childParentMap.put(curParent.right, curParent);
            }
        }
        
        // Once the map is populated, get all ancestor nodes of one of the nodes
        HashSet<TreeNode> qAncestors = new HashSet<>();
        while(q != null) {
            qAncestors.add(q);
            q = childParentMap.get(q);
        }
        
        // check if p matches one of q's ancestors
        while(!qAncestors.contains(p)) {
            p = childParentMap.get(p);
        }
        
        return p;
    }
}
