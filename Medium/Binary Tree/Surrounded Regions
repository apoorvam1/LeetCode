# Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.

# A region is captured by flipping all 'O's into 'X's in that surrounded region.

# Example:

# X X X X
# X O O X
# X X O X
# X O X X
# After running your function, the board should be:

# X X X X
# X X X X
# X X X X
# X O X X
# Explanation:

# Surrounded regions shouldnâ€™t be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. 
# Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are 
# connected if they are adjacent cells connected horizontally or vertically.

class Solution {
    
    class Point {
        int x;
        int y;
        
        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    
    public void solve(char[][] board) {
        // null check
        if(board.length == 0) return;
        
        // get row length and col length
        int rowN = board.length;
        int colN = board[0].length;
        
        Queue<Point> q = new LinkedList<>();
        
        // identify all '0's on the border and mark them as '+' and add to queue
        // This is to make sure that these are not surrounded regions
        for(int i = 0; i < rowN; i++) {
            if(board[i][0] == 'O') {
                board[i][0] = '+';
                q.offer(new Point(i, 0));
            }
            
            if(board[i][colN-1] == 'O') {
                board[i][colN-1] = '+';
                q.offer(new Point(i, colN-1));
            }
        }
        
        for(int i = 0; i < colN; i++) {
            if(board[0][i] == 'O') {
                board[0][i] = '+';
                q.offer(new Point(0, i));
            }
            
            if(board[rowN-1][i] == 'O') {
                board[rowN-1][i] = '+';
                q.offer(new Point(rowN-1, i));
            }
        }
        
        // Iterate over q and see if there are any '0's connected to them
        // If so, they also should be marked '+' and added to q
        while(!q.isEmpty()) {
            Point p = q.poll();
            int row = p.x;
            int col = p.y;
            
            if(row-1 >= 0 && board[row-1][col] == 'O') {
                board[row-1][col] = '+';
                q.offer(new Point(row-1, col));
            }
            
            if(row+1 < rowN && board[row+1][col] == 'O') {
                board[row+1][col] = '+';
                q.offer(new Point(row+1, col));
            }
            
            if(col-1 >= 0 && board[row][col-1] == 'O') {
                board[row][col-1] = '+';
                q.offer(new Point(row, col-1));
            }
            
            if(col+1 < colN && board[row][col+1] == 'O') {
                board[row][col+1] = '+';
                q.offer(new Point(row, col+1));
            }
        }
        
        // Now all the '0's that didn't get changed to '+' are surrounded regions and should be changed to 'X'
        // all '+'s should remain as '0's
        
        for(int i = 0; i < rowN; i++) {
            for(int j = 0; j < colN; j++) {
                //System.out.print(board[i][j] + " ");
                if(board[i][j] == 'O') board[i][j] = 'X';
                if(board[i][j] == '+') board[i][j] = 'O';
            }
            //System.out.println();
        }
    }
}
