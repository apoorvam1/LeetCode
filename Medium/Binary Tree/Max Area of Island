# Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land) connected 4-directionally 
# (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

# Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)

# Example 1:

# [[0,0,1,0,0,0,0,1,0,0,0,0,0],
#  [0,0,0,0,0,0,0,1,1,1,0,0,0],
#  [0,1,1,0,1,0,0,0,0,0,0,0,0],
#  [0,1,0,0,1,1,0,0,1,0,1,0,0],
#  [0,1,0,0,1,1,0,0,1,1,1,0,0],
#  [0,0,0,0,0,0,0,0,0,0,1,0,0],
#  [0,0,0,0,0,0,0,1,1,1,0,0,0],
#  [0,0,0,0,0,0,0,1,1,0,0,0,0]]
# Given the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.

# Example 2:
# [[0,0,0,0,0,0,0,0]]
# Given the above grid, return 0.
# Note: The length of each dimension in the given grid does not exceed 50.

class Solution {
    class Node {
        int i;
        int j;
        
        public Node(int x, int y) {
            this.i = x;
            this.j = y;
        }
    }
    
    public int maxAreaOfIsland(int[][] grid) {
        if(grid.length == 0)
           return 0;
        int maxArea = 0;
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(grid[i][j] == 1) {
                    grid[i][j] = 0;
                    int area = bfs(i, j, grid);
                    maxArea = Math.max(maxArea, area);
                }
            }
        }
        return maxArea;
    }
    
    private int bfs(int i, int j, int[][] grid) {
        
        int area = 0;
        Queue<Node> q = new LinkedList<>();
        q.offer(new Node(i, j));

        while(!q.isEmpty()) {
            // check all the childrens of [i,j]
            Node cur = q.poll();

            // up
            if(cur.i-1 >= 0 && grid[cur.i-1][cur.j] == 1) {
                q.offer(new Node(cur.i-1,cur.j));
                grid[cur.i-1][cur.j] = 0;
            }

            //down
            if(cur.i+1 < grid.length && grid[cur.i+1][cur.j] == 1) {
                q.offer(new Node(cur.i+1, cur.j));
                grid[cur.i+1][cur.j] = 0;
            }

            //left
            if(cur.j-1 >= 0 && grid[cur.i][cur.j-1] == 1) {
                q.offer(new Node(cur.i, cur.j-1));
                grid[cur.i][cur.j-1] = 0;
            }

            //right
            if(cur.j+1 < grid[0].length && grid[cur.i][cur.j+1] == 1) {
                q.offer(new Node(cur.i, cur.j+1));
                grid[cur.i][cur.j+1] = 0;
            }
            area++;
        }
        return area;
    }
}
