maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.

The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null 
nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.

Example 1:

Input: 

           1
         /   \
        3     2
       / \     \  
      5   3     9 

Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
Example 2:

Input: 

          1
         /  
        3    
       / \       
      5   3     

Output: 2
Explanation: The maximum width existing in the third level with the length 2 (5,3).
Example 3:

Input: 

          1
         / \
        3   2 
       /        
      5      

Output: 2
Explanation: The maximum width existing in the second level with the length 2 (3,2).


# My Notes: Position of a node in the tree is as follows
# Position of root node is considered as 1
# if left node position = position of parent * 2
# if right node position = position of parent * 2 + 1

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root == null) return 0;
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        Map<TreeNode, Integer> hm = new HashMap<>();
        q.offer(root);
        hm.put(root, 1);
        int curW = 0;
        int maxW = 0;
        
        while(!q.isEmpty()) {
            int size = q.size();
            int startPos = 0;
            int endPos = 0;
            
            for(int i = 0; i < size; i++) {
                TreeNode cur = q.poll();
                if(i == 0)
                    startPos = hm.get(cur);
                
                if(i == size-1)
                    endPos = hm.get(cur);
                if(cur.left != null) {
                    hm.put(cur.left, hm.get(cur) * 2);
                    q.offer(cur.left);
                }
                if(cur.right != null) {
                    hm.put(cur.right, hm.get(cur) * 2 + 1);
                    q.offer(cur.right);
                }
            }
            curW = endPos - startPos + 1;
            maxW = Math.max(maxW, curW);
        }
        return maxW;
    }
}
