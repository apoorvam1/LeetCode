# Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

# Calling next() will return the next smallest number in the BST.

# Note:

# next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.
# You may assume that next() call will always be valid, that is, there will be at least a next smallest number
# in the BST when next() is called.



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class BSTIterator {

    Stack<TreeNode> stk = new Stack<>();
    public BSTIterator(TreeNode root) {
        // Initially push all the nodes to the left of current node + current node
        pushAllLeft(root);
    }
    

    
    /** @return the next smallest number */
    public int next() {
        TreeNode temp = stk.pop();
        // When a node popped, it's right node and all nodes left to it are pushed
        pushAllLeft(temp.right);
        return temp.val;
    }
    
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        // if the stk is not empty has next is true
        return !stk.isEmpty();
    }
    
    private void pushAllLeft(TreeNode node) {
        while(node != null) {
            stk.push(node);
            node = node.left;
        }
    }
}

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator obj = new BSTIterator(root);
 * int param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */
