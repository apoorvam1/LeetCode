# Given a collection of candidate numbers (candidates) and a target number (target), 
# find all unique combinations in candidates where the candidate numbers sums to target.

# Each number in candidates may only be used once in the combination.

# Note:

# All numbers (including target) will be positive integers.
# The solution set must not contain duplicate combinations.
# Example 1:
# Input: candidates = [10,1,2,7,6,1,5], target = 8,
# A solution set is:
# [
#   [1, 7],
#   [1, 2, 5],
#   [2, 6],
#   [1, 1, 6]
# ]

# Example 2:
# Input: candidates = [2,5,2,1,2], target = 5,
# A solution set is:
# [
#   [1,2,2],
#  [5]
# ] 

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<>();
        combinationSum2(candidates, target, res, new ArrayList<Integer>(), 0);
        return res;
    }
    
    private void combinationSum2(int[] candidates,int target,List<List<Integer>> res, ArrayList<Integer> cur, int pre) {
        if(target == 0) {
            res.add(new ArrayList<Integer>(cur));
        } else {
            for(int i = pre; i < candidates.length && candidates[i] <= target; i++) {
                if(i > pre && candidates[i] == candidates[i-1]) continue;
                cur.add(candidates[i]);
                combinationSum2(candidates, target-candidates[i], res, cur, i+1);
                cur.remove(cur.size()-1);
            }
        }
    }
}
