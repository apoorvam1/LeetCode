# Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

# Your algorithm's runtime complexity must be in the order of O(log n).

# If the target is not found in the array, return [-1, -1].

# Example 1:

# Input: nums = [5,7,7,8,8,10], target = 8
# Output: [3,4]
# Example 2:

# Input: nums = [5,7,7,8,8,10], target = 6
# Output: [-1,-1]

# My Note: Pay attention to the fact that array is sorted and once nums[low] or nums[high] matches nums[mid] all numbers in   # berween them will be the same

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] result = {-1, -1};
        if(nums.length == 0) return result;
        int low = 0; 
        int high  = nums.length - 1;
        
        // if nums[low] is not same as nums[high] enter the loop
        while(nums[low] < nums[high]) {
            int mid = low + (high-low)/2;
            if(nums[mid] < target) {
                low = mid + 1;
            } else if(nums[mid] > target) {
                high = mid -1;
            } else {
                // since nums[low] is not same as nums[high](loop condition)
                // if nums[low] matches target we don't need nums[high]
                if(nums[low] == target) {
                    high--;
                } else {
                    // else we don't need nums[high]
                    low++;
                }
            }
        }
        if(nums[low] == nums[high] && nums[low] == target){
            result[0] = low;
            result[1] = high;
        }
            
        return result;
    }
}
