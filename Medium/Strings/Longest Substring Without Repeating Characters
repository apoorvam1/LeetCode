Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
             
             

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s == null || s.length() == 0) return 0;
        
        HashSet<Character> hs = new HashSet<>();
        int maxLen = Integer.MIN_VALUE;
        int  i = 0;
        int j = 0;
        
        // Maintain a sliding window through index i and j
        // As long as charaters are uniqe keep adding char
        // Once a duplicate is found move the window by remove chars from left
        while(j < s.length()) {
            if(!hs.contains(s.charAt(j))) {
                hs.add(s.charAt(j++));
                maxLen = Math.max(maxLen, hs.size());
            } else {
                hs.remove(s.charAt(i++));
            }
        }
        return maxLen;
    }
}
