# The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this:
# (you may want to display this pattern in a fixed font for better legibility)

# P   A   H   N
# A P L S I I G
# Y   I   R
# And then read line by line: "PAHNAPLSIIGYIR"

# Write the code that will take a string and make this conversion given a number of rows:

# string convert(string s, int numRows);
# Example 1:

# Input: s = "PAYPALISHIRING", numRows = 3
# Output: "PAHNAPLSIIGYIR"
# Example 2:

# Input: s = "PAYPALISHIRING", numRows = 4
# Output: "PINALSIGYAHRPI"
# Explanation:

# P     I    N
# A   L S  I G
# Y A   H R
# P     I

# My Note: After every numRows-1 iteration either you climb up the pattern or climb down.
# mi increases if we are traversing trough the vertical pattern of the string. Ex: PAYP
# mi decreses if we are traversing through the diagonal pattern of the string. Ex: ALI or RIN

class Solution {
    public String convert(String s, int numRows) {
        if(s.isEmpty() || numRows == 1) return s;
        
        Map<Integer, StringBuilder> m = new HashMap<>();
        int mi = 0;
         
        for (int i = 0; i < numRows; i++) {
            m.put(i, new StringBuilder());
        }
        
        // Tells whether the traversal is vertical or diagonal
        boolean even = true;
        
        for(int i = 0; i < s.length(); i++) {
            if(even) {
                m.put(mi, m.getOrDefault(mi, new StringBuilder()).append(s.charAt(i)));
                mi++;
                if(mi == numRows) {
                    even = false;
                    mi = numRows - 2;
                }
            } else {
                m.put(mi, m.getOrDefault(mi, new StringBuilder()).append(s.charAt(i))); 
                mi--;
                if(mi < 0) {
                    even = true;
                    mi = 1;
                }
            }
            
        }
         StringBuilder ret = new StringBuilder();
        for (int i = 0; i < numRows; i++) ret.append(m.get(i));
        return ret.toString();
        
    }
}


**Solution 2: With Lists**

public String convert(String s, int numRows) {
        if(s.isEmpty() || numRows == 1) return s;
        StringBuilder[] sbarray = new StringBuilder[numRows];
        for(int i = 0; i < numRows; i++) {
            sbarray[i] = new StringBuilder();
        }
        int index = 0;
        boolean forward = true;
        
        for(int i = 0; i < s.length(); i++) {
            char cur = s.charAt(i);
            if(forward) {
                sbarray[index++].append(cur);
                if(index == numRows) {
                    forward = false;
                    index = index-2;
                }
            } else {
                sbarray[index--].append(cur);
                if(index < 0) {
                    index = 1;
                    forward = true;
                }
            }
        }
        
        return writeNewString(sbarray);
    }
    
    private String writeNewString(StringBuilder[] sbarray) {
        StringBuilder ret = new StringBuilder();
        for(int i = 0; i < sbarray.length; i++) {
            ret.append(sbarray[i]);
        }
        return ret.toString();
    }
