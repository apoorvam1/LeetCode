# Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

# Example:

# Input: n = 4, k = 2
# Output:
# [
#   [2,4],
#   [3,4],
#   [2,3],
#   [1,2],
#   [1,3],
#   [1,4],
# ]

class Solution {
    List<List<Integer>> res = new ArrayList<>();
    
    // k is length of combination. Decrement it once a value is added to cur
    // Continue until k is 0
    private void getCombination(int n, int k, int pre, List<Integer> cur) {
        if(k == 0) {
            res.add(new ArrayList(cur));
        } else {
            for(int i = pre; i <=n; i++) {
                cur.add(i);
                getCombination(n, k-1, i+1, cur);
                
                //remove the previously added i to make place for next value of i.
                // if loop is pver cur would be empty and returned back to the previous call

                cur.remove(cur.size()-1);
            }
        }
    }
    
    public List<List<Integer>> combine(int n, int k) {
        getCombination(n, k, 1, new ArrayList<>());
        return res;
    }
}
