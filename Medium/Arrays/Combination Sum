# Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), 
# find all unique combinations in candidates where the candidate numbers sums to target.

# The same repeated number may be chosen from candidates unlimited number of times.

# Note:

# All numbers (including target) will be positive integers.
# The solution set must not contain duplicate combinations.
# Example 1:

# Input: candidates = [2,3,6,7], target = 7,
# A solution set is:
# [
#   [7],
#   [2,2,3]
# ]

# Example 2:
# Input: candidates = [2,3,5], target = 8,
# A solution set is:
# [
#   [2,2,2,2],
#   [2,3,3],
#   [3,5]
# ]

# My Notes: 
# Related Problems: 
# https://github.com/apoorvam1/LeetCode/blob/master/Medium/Strings/Combinations
# https://github.com/apoorvam1/LeetCode/blob/master/Medium/Strings/Letter%20Combinations%20of%20a%20Phone%20Number


class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<>();
        combinationSum(candidates, target, new ArrayList<Integer>(), res, 0);
        
        return res;
    }
    
    private void combinationSum(int[] candidates, int target, ArrayList<Integer> cur,
                                List<List<Integer>> res, int start) {
        if(target == 0) {
            res.add(new ArrayList<Integer>(cur));
        } else {
            for(int i = start; i < candidates.length && candidates[i] <= target; i++) {
                cur.add(candidates[i]);
                combinationSum(candidates, target-candidates[i], cur, res, i);
                cur.remove(cur.size()-1);
            }
        }
    }
}


