# Find all possible combinations of k numbers that add up to a number n,
# given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

# Note:

# All numbers will be positive integers.
# The solution set must not contain duplicate combinations.
# Example 1:

# Input: k = 3, n = 7
# Output: [[1,2,4]]
# Example 2:

# Input: k = 3, n = 9
# Output: [[1,2,6], [1,3,5], [2,3,4]]

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<>();
        combinationSum3(k, n, res, new ArrayList<>(), 1);
        return res;
        // [1-9]
    }
    
    private void combinationSum3(int k, int target, List<List<Integer>> res, ArrayList<Integer> cur, int pre) {
        if(k == 0 && target == 0) {
            res.add(new ArrayList<>(cur));
        } else {
            for(int i = pre; i <= 9 && i <= target; i++) {
                cur.add(i);
                combinationSum3(k-1, target-i, res, cur, i+1);
                cur.remove(cur.size()-1);
            }
        }
    }
}
