Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2

Emaxple 2:
Input:nums = [2,7,1,-3,7], k = 5
Output: 2

Note:
The length of the array is in range [1, 20,000].
The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].

class Solution {
    public int subarraySum(int[] nums, int k) {
        int sum = 0, result = 0;
        Map<Integer, Integer> preSum = new HashMap<>();
        // if first number itself is k, then removing 0 from sum gives k. 
        preSum.put(0, 1);
        
        for (int i = 0; i < nums.length; i++) {
            // at each index cacluate the cumulative sum
            sum += nums[i];
            
            // check if the map has (sum until cur number - k) 
            // i.e how many times cumulative sum in array has (sum-k)
            // then remaning elements sum in array is k
            if (preSum.containsKey(sum - k)) {
                result += preSum.get(sum - k);
            }
            preSum.put(sum, preSum.getOrDefault(sum, 0) + 1);
        }
        
        return result;
    }
}
