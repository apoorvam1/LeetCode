Given n return nth fibonacci number

Method1: Recursion

int fib(int n) {
  if(n == 0 || n == 1) return n;
  return fib(n-1) + fib(n-1);
}

If we draw recursive tree for the above algorithm, we see that we can memoize the results. Below are 3 methods with Dynamic
programming

Method2: Dynamic Programming (Top-Down)
int fib(int n) {
  return fib(n, new int[n+1]);
}

int fib(int n, int[] memo) {
  if(n == 0 || n == 1) return n;
  if(memo[n] == 0) {
    memo[n] = fib(n-1, memo) + fib(n-2, memo);
  }
  
  return memo[0];
}

Method3: Dynamic Programming (Bottom-Up)
int fib(int n) {
  if(n == 0 || n == 1) return n;
  
  int[] memo = new int[n+1];
  
  for(int i = 2; i < n; i++) {
    memo[i] = memo[i-1] + memo[i-2];
  }
  
  return memo[n-1] + memo[n-2];
}

Method3: Dynamic Programming Optimized (Bottom-Up)
If we see above algorithm we realize that all that we need is the last 2 caculated fib values. So, we don't even need the 
memo array. We need to just keep track of last 2 values. 

int fib(int n) {
  if(n == 0 || n == 1) return n;
  int a = 0;
  int b = 1;
  
  for(int i = 2; i < n; i++) {
    int c = a + b;
    a = b;
    b = c;
  }
  return a + b;
}


