# Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a # file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another     # computer environment.

# Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your 
# serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a 
# string and this string can be deserialized to the original tree structure.

Example: 

You may serialize the following tree:

    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]"


public class Codec {

    private final String splitter = ",";
    private final String NULL = "null";
    
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        serializeRecursive(root, sb);
        return sb.toString();
    }

    // Pre order traversal to serialize
    private void serializeRecursive(TreeNode root, StringBuilder sb) {
        if(root == null) {
            sb.append(NULL).append(splitter);
        } else {
            sb.append(root.val).append(splitter);
            serializeRecursive(root.left, sb);
            serializeRecursive(root.right, sb);
        }
    }
    
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        Deque<String> nodes = new LinkedList<>();
        nodes.addAll(Arrays.asList(data.split(splitter)));
        return deserializeRecursive(nodes);
    }
    
    // Traverse recursively to construct tree
    private TreeNode deserializeRecursive(Deque<String> nodes) {
        String val = nodes.remove();
        if (val.equals(NULL)) return null;
        else {
            TreeNode node = new TreeNode(Integer.valueOf(val));
            node.left = deserializeRecursive(nodes);
            node.right = deserializeRecursive(nodes);
            return node;
        }
    }
}
